/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_FFI__
#define __RUST_FFI__

#ifdef __cplusplus
extern "C" {
#endif


#include <stddef.h>
#include <stdint.h>

/** \brief
 *  `&'lt [T]` but with a guaranteed `#[repr(C)]` layout.
 * 
 *  # C layout (for some given type T)
 * 
 *  ```c
 *  typedef struct {
 *      // Cannot be NULL
 *      T * ptr;
 *      size_t len;
 *  } slice_T;
 *  ```
 * 
 *  # Nullable pointer?
 * 
 *  If you want to support the above typedef, but where the `ptr` field is
 *  allowed to be `NULL` (with the contents of `len` then being undefined)
 *  use the `Option< slice_ptr<_> >` type.
 */
typedef struct {

    uint8_t const * ptr;

    size_t len;

} slice_ref_uint8_t;

/** \brief
 *  Only useful as part of `FfiResult`.  Tells us if it is Ok or Err and the
 *  type of the error
 */
/** \remark Has the same ABI as `int8_t` **/
#ifdef DOXYGEN
typedef enum StatusCodes
#else
typedef int8_t StatusCodes_t; enum
#endif
{
    /** . */
    STATUS_CODES_OK = 0,
    /** . */
    STATUS_CODES_INVALID_LENGTH = -1,
}
#ifdef DOXYGEN
StatusCodes_t
#endif
;

typedef struct PortscanTarget PortscanTarget_t;

/** \brief
 *  This is a poor imitation of the Result enum provided by rust.  If
 *  status_code is 0, then it is an OK and contents will be set.  If it is
 *  nonzero then the status code will be the error type.
 */
typedef struct {

    StatusCodes_t status_code;

    PortscanTarget_t * contents;

} FfiResult_PortscanTarget_t;

/** \brief
 *  Construct a new `PortscanTarget` containing an IPv4 address.  If the input
 *  slice is anything besides 4 bytes then it will return an error result.
 */
FfiResult_PortscanTarget_t new_ip_v4_address (
    slice_ref_uint8_t input);

FfiResult_PortscanTarget_t new_ip_v6_address (
    slice_ref_uint8_t input);

typedef struct PortscanBuilder PortscanBuilder_t;

PortscanBuilder_t * new_portscan_builder (void);

void add_target (
    PortscanBuilder_t * builder,
    PortscanTarget_t const * target);

void start_scan (
    PortscanBuilder_t * builder);


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* __RUST_FFI__ */
